name: Build Image

on:
  push:
    branches:
      - main
      - develop*
  pull_request:
    types: [closed]
    branches:
      - main
      - develop*

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  push_to_registries:
    name: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DockerUsername }}
          password: ${{ secrets.DockerToken }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set variables based on branch
        id: set_tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            echo "BRANCH_NAME=latest" >> $GITHUB_ENV
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed -r 's/refs\/heads\///g')
            echo "tag=develop" >> $GITHUB_OUTPUT
            echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          fi

      - name: Convert IMAGE_NAME to lowercase
        run: echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag docker.io/${{ env.IMAGE_NAME }}:amd64-${{ steps.set_tag.outputs.tag }} \
            --tag docker.io/${{ env.IMAGE_NAME }}:amd64-${{ env.BRANCH_NAME }} \
            --tag ghcr.io/${{ env.IMAGE_NAME }}:amd64-${{ steps.set_tag.outputs.tag }} \
            --tag ghcr.io/${{ env.IMAGE_NAME }}:amd64-${{ env.BRANCH_NAME }} \
            .
          docker buildx build \
            --platform linux/arm64 \
            --push \
            --tag docker.io/${{ env.IMAGE_NAME }}:arm64-${{ steps.set_tag.outputs.tag }} \
            --tag docker.io/${{ env.IMAGE_NAME }}:arm64-${{ env.BRANCH_NAME }} \
            --tag ghcr.io/${{ env.IMAGE_NAME }}:arm64-${{ steps.set_tag.outputs.tag }} \
            --tag ghcr.io/${{ env.IMAGE_NAME }}:arm64-${{ env.BRANCH_NAME }} \
            .
      - name: Create and push Docker manifest
        run: |
          # Function to handle manifest operations
          create_and_push_manifest() {
            local registry="$1"
            local tag="$2"
            
            echo "Creating manifest for ${registry}/${{ env.IMAGE_NAME }}:${tag}"
            
            docker manifest create "${registry}/${{ env.IMAGE_NAME }}:${tag}" \
              --amend "${registry}/${{ env.IMAGE_NAME }}:amd64-${tag}" \
              --amend "${registry}/${{ env.IMAGE_NAME }}:arm64-${tag}"
            
            docker manifest annotate "${registry}/${{ env.IMAGE_NAME }}:${tag}" \
              "${registry}/${{ env.IMAGE_NAME }}:amd64-${tag}" --arch amd64
            
            docker manifest annotate "${registry}/${{ env.IMAGE_NAME }}:${tag}" \
              "${registry}/${{ env.IMAGE_NAME }}:arm64-${tag}" --arch arm64
            
            docker manifest push "${registry}/${{ env.IMAGE_NAME }}:${tag}"
          }

          # Process both registries and tags
          for registry in "docker.io" "ghcr.io"; do
            create_and_push_manifest "$registry" "${{ steps.set_tag.outputs.tag }}"
            create_and_push_manifest "$registry" "${{ env.BRANCH_NAME }}"
          done
