{"ast":null,"code":"import _slicedToArray from\"/Users/alexkeith/encodarr/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from\"react\";var useHistory=function useHistory(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),socket=_useState2[0],setSocket=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),history=_useState4[0],setHistory=_useState4[1];useEffect(function(){// Create a new WebSocket connection when the component mounts\nvar newSocket=new WebSocket(\"ws://localhost:8000/ws\");// Event handler when the WebSocket connection is opened\nnewSocket.onopen=function(){console.log(\"WebSocket connected\");};// Event handler for received messages\nnewSocket.onmessage=function(event){if(newSocket.readyState===WebSocket.OPEN){setHistory(JSON.parse(event.data));}};// Event handler when the WebSocket connection is closed\nnewSocket.onclose=function(){console.log(\"WebSocket closed\");};// Set the WebSocket instance in the component's state\nsetSocket(newSocket);// Cleanup: Close the WebSocket connection when the component is unmounted\nreturn function(){newSocket.close();};},[]);// The empty dependency array ensures that this effect runs only once on mount\n// Expose the socket and queue state to the components using this hook\nreturn history;};export default useHistory;","map":{"version":3,"names":["useEffect","useState","useHistory","_useState","_useState2","_slicedToArray","socket","setSocket","_useState3","_useState4","history","setHistory","newSocket","WebSocket","onopen","console","log","onmessage","event","readyState","OPEN","JSON","parse","data","onclose","close"],"sources":["/Users/alexkeith/encodarr/frontend/src/hooks/useHistory.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useHistory = () => {\n\tconst [socket, setSocket] = useState(null);\n\tconst [history, setHistory] = useState([]);\n\n\tuseEffect(() => {\n\t\t// Create a new WebSocket connection when the component mounts\n\t\tconst newSocket: any = new WebSocket(\"ws://localhost:8000/ws\");\n\n\t\t// Event handler when the WebSocket connection is opened\n\t\tnewSocket.onopen = () => {\n\t\t\tconsole.log(\"WebSocket connected\");\n\t\t};\n\n\t\t// Event handler for received messages\n\t\tnewSocket.onmessage = (event: any) => {\n\t\t\tif (newSocket.readyState === WebSocket.OPEN) {\n\t\t\t\tsetHistory(JSON.parse(event.data));\n\t\t\t}\n\t\t};\n\n\t\t// Event handler when the WebSocket connection is closed\n\t\tnewSocket.onclose = () => {\n\t\t\tconsole.log(\"WebSocket closed\");\n\t\t};\n\n\t\t// Set the WebSocket instance in the component's state\n\t\tsetSocket(newSocket);\n\n\t\t// Cleanup: Close the WebSocket connection when the component is unmounted\n\t\treturn () => {\n\t\t\tnewSocket.close();\n\t\t};\n\t}, []); // The empty dependency array ensures that this effect runs only once on mount\n\n\t// Expose the socket and queue state to the components using this hook\n\treturn history;\n};\n\nexport default useHistory;\n"],"mappings":"wHAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAA,CAAS,CACxB,IAAAC,SAAA,CAA4BF,QAAQ,CAAC,IAAI,CAAC,CAAAG,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAnCG,MAAM,CAAAF,UAAA,IAAEG,SAAS,CAAAH,UAAA,IACxB,IAAAI,UAAA,CAA8BP,QAAQ,CAAC,EAAE,CAAC,CAAAQ,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAnCE,OAAO,CAAAD,UAAA,IAAEE,UAAU,CAAAF,UAAA,IAE1BT,SAAS,CAAC,UAAM,CACf;AACA,GAAM,CAAAY,SAAc,CAAG,GAAI,CAAAC,SAAS,CAAC,wBAAwB,CAAC,CAE9D;AACAD,SAAS,CAACE,MAAM,CAAG,UAAM,CACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACnC,CAAC,CAED;AACAJ,SAAS,CAACK,SAAS,CAAG,SAACC,KAAU,CAAK,CACrC,GAAIN,SAAS,CAACO,UAAU,GAAKN,SAAS,CAACO,IAAI,CAAE,CAC5CT,UAAU,CAACU,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACK,IAAI,CAAC,CAAC,CACnC,CACD,CAAC,CAED;AACAX,SAAS,CAACY,OAAO,CAAG,UAAM,CACzBT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAChC,CAAC,CAED;AACAT,SAAS,CAACK,SAAS,CAAC,CAEpB;AACA,MAAO,WAAM,CACZA,SAAS,CAACa,KAAK,CAAC,CAAC,CAClB,CAAC,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACA,MAAO,CAAAf,OAAO,CACf,CAAC,CAED,cAAe,CAAAR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}