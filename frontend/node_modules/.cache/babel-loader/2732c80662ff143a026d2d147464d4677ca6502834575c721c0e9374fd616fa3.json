{"ast":null,"code":"var _jsxFileName = \"/Users/alexkeith/encodarr/src/components/mediaManagement/MediaManagement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport useSettings from \"../../hooks/useSettings\";\nimport styles from \"./MediaManagement.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MediaManagement = () => {\n  _s();\n  const initialSettings = useSettings();\n  const [settings, setSettings] = useState(initialSettings);\n  useEffect(() => {\n    // Update the state with the initial settings when they become available\n    setSettings(initialSettings);\n  }, [initialSettings]);\n  const handleInputChange = (name, value) => {\n    // Find the setting in the state and update its value\n    const updatedSettings = settings.map(setting => setting.name === name ? {\n      ...setting,\n      value\n    } : setting);\n\n    // Update the state with the new settings\n    setSettings(updatedSettings);\n  };\n  console.log(settings);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.mediaManagement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(MediaManagement, \"vwaQDyPWGFYSa2+PPdKoc2ThSVA=\", false, function () {\n  return [useSettings];\n});\n_c = MediaManagement;\nexport default MediaManagement;\nvar _c;\n$RefreshReg$(_c, \"MediaManagement\");","map":{"version":3,"names":["React","useState","useEffect","useSettings","styles","jsxDEV","_jsxDEV","MediaManagement","_s","initialSettings","settings","setSettings","handleInputChange","name","value","updatedSettings","map","setting","console","log","className","mediaManagement","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexkeith/encodarr/src/components/mediaManagement/MediaManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useSettings from \"../../hooks/useSettings\";\nimport styles from \"./MediaManagement.module.scss\";\n\nconst MediaManagement = () => {\n\tconst initialSettings = useSettings();\n\tconst [settings, setSettings] = useState(initialSettings);\n\n\tuseEffect(() => {\n\t\t// Update the state with the initial settings when they become available\n\t\tsetSettings(initialSettings);\n\t}, [initialSettings]);\n\n\tconst handleInputChange = (name: any, value: any) => {\n\t\t// Find the setting in the state and update its value\n\t\tconst updatedSettings: any = settings.map((setting: any) =>\n\t\t\tsetting.name === name ? { ...setting, value } : setting\n\t\t);\n\n\t\t// Update the state with the new settings\n\t\tsetSettings(updatedSettings);\n\t};\n\n\tconsole.log(settings);\n\treturn <div className={styles.mediaManagement}></div>;\n};\n\nexport default MediaManagement;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,MAAM,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,eAAe,GAAGN,WAAW,CAAC,CAAC;EACrC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACQ,eAAe,CAAC;EAEzDP,SAAS,CAAC,MAAM;IACf;IACAS,WAAW,CAACF,eAAe,CAAC;EAC7B,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAMG,iBAAiB,GAAGA,CAACC,IAAS,EAAEC,KAAU,KAAK;IACpD;IACA,MAAMC,eAAoB,GAAGL,QAAQ,CAACM,GAAG,CAAEC,OAAY,IACtDA,OAAO,CAACJ,IAAI,KAAKA,IAAI,GAAG;MAAE,GAAGI,OAAO;MAAEH;IAAM,CAAC,GAAGG,OACjD,CAAC;;IAED;IACAN,WAAW,CAACI,eAAe,CAAC;EAC7B,CAAC;EAEDG,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;EACrB,oBAAOJ,OAAA;IAAKc,SAAS,EAAEhB,MAAM,CAACiB;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACtD,CAAC;AAACjB,EAAA,CArBID,eAAe;EAAA,QACIJ,WAAW;AAAA;AAAAuB,EAAA,GAD9BnB,eAAe;AAuBrB,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}