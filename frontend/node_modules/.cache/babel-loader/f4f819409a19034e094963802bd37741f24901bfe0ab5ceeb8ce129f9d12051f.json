{"ast":null,"code":"var _jsxFileName = \"/Users/alexkeith/encodarr/src/components/mediaManagement/MediaManagement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport useSettings from \"../../hooks/useSettings\";\nimport styles from \"./MediaManagement.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MediaManagement = () => {\n  _s();\n  const initialSettings = useSettings();\n  const [settings, setSettings] = useState(initialSettings);\n  useEffect(() => {\n    setSettings(initialSettings);\n  }, [initialSettings]);\n  const handleInputChange = (name, value) => {\n    const updatedSettings = settings.map(setting => setting.name === name ? {\n      ...setting,\n      value\n    } : setting);\n    setSettings(updatedSettings);\n  };\n  const handleSubmit = () => {\n    console.log(\"Updated Settings:\", settings);\n    // Implement your logic to submit the updated settings\n  };\n\n  if (!settings.length) {\n    // Render a loading state or null while settings are being fetched\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.mediaManagement,\n    children: [settings.map(setting => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [setting.name, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: setting.value,\n          onChange: e => handleInputChange(setting.name, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 6\n      }, this)\n    }, setting.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n};\n_s(MediaManagement, \"vwaQDyPWGFYSa2+PPdKoc2ThSVA=\", false, function () {\n  return [useSettings];\n});\n_c = MediaManagement;\nexport default MediaManagement;\nvar _c;\n$RefreshReg$(_c, \"MediaManagement\");","map":{"version":3,"names":["React","useEffect","useState","useSettings","styles","jsxDEV","_jsxDEV","MediaManagement","_s","initialSettings","settings","setSettings","handleInputChange","name","value","updatedSettings","map","setting","handleSubmit","console","log","length","className","mediaManagement","children","type","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/alexkeith/encodarr/src/components/mediaManagement/MediaManagement.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport useSettings from \"../../hooks/useSettings\";\nimport styles from \"./MediaManagement.module.scss\";\n\nconst MediaManagement = () => {\n\tconst initialSettings = useSettings();\n\tconst [settings, setSettings] = useState(initialSettings);\n\n\tuseEffect(() => {\n\t\tsetSettings(initialSettings);\n\t}, [initialSettings]);\n\n\tconst handleInputChange = (name: any, value: any) => {\n\t\tconst updatedSettings: any = settings.map((setting: any) =>\n\t\t\tsetting.name === name ? { ...setting, value } : setting\n\t\t);\n\t\tsetSettings(updatedSettings);\n\t};\n\n\tconst handleSubmit = () => {\n\t\tconsole.log(\"Updated Settings:\", settings);\n\t\t// Implement your logic to submit the updated settings\n\t};\n\n\tif (!settings.length) {\n\t\t// Render a loading state or null while settings are being fetched\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div className={styles.mediaManagement}>\n\t\t\t{settings.map((setting: any) => (\n\t\t\t\t<div key={setting.name}>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t{setting.name}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={setting.value}\n\t\t\t\t\t\t\tonChange={(e) => handleInputChange(setting.name, e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t\t<button onClick={handleSubmit}>Submit</button>\n\t\t</div>\n\t);\n};\n\nexport default MediaManagement;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,MAAM,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,eAAe,GAAGN,WAAW,CAAC,CAAC;EACrC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAACO,eAAe,CAAC;EAEzDR,SAAS,CAAC,MAAM;IACfU,WAAW,CAACF,eAAe,CAAC;EAC7B,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAMG,iBAAiB,GAAGA,CAACC,IAAS,EAAEC,KAAU,KAAK;IACpD,MAAMC,eAAoB,GAAGL,QAAQ,CAACM,GAAG,CAAEC,OAAY,IACtDA,OAAO,CAACJ,IAAI,KAAKA,IAAI,GAAG;MAAE,GAAGI,OAAO;MAAEH;IAAM,CAAC,GAAGG,OACjD,CAAC;IACDN,WAAW,CAACI,eAAe,CAAC;EAC7B,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,QAAQ,CAAC;IAC1C;EACD,CAAC;;EAED,IAAI,CAACA,QAAQ,CAACW,MAAM,EAAE;IACrB;IACA,OAAO,IAAI;EACZ;EAEA,oBACCf,OAAA;IAAKgB,SAAS,EAAElB,MAAM,CAACmB,eAAgB;IAAAC,QAAA,GACrCd,QAAQ,CAACM,GAAG,CAAEC,OAAY,iBAC1BX,OAAA;MAAAkB,QAAA,eACClB,OAAA;QAAAkB,QAAA,GACEP,OAAO,CAACJ,IAAI,eACbP,OAAA;UACCmB,IAAI,EAAC,MAAM;UACXX,KAAK,EAAEG,OAAO,CAACH,KAAM;UACrBY,QAAQ,EAAGC,CAAC,IAAKf,iBAAiB,CAACK,OAAO,CAACJ,IAAI,EAAEc,CAAC,CAACC,MAAM,CAACd,KAAK;QAAE;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC,GARCf,OAAO,CAACJ,IAAI;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASjB,CACL,CAAC,eACF1B,OAAA;MAAQ2B,OAAO,EAAEf,YAAa;MAAAM,QAAA,EAAC;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAER,CAAC;AAACxB,EAAA,CA1CID,eAAe;EAAA,QACIJ,WAAW;AAAA;AAAA+B,EAAA,GAD9B3B,eAAe;AA4CrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}