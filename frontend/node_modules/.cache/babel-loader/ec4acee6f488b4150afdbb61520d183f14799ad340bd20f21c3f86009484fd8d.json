{"ast":null,"code":"var _jsxFileName = \"/Users/alexkeith/encodarr/src/components/profiles/Profiles.tsx\",\n  _s = $RefreshSig$();\nimport styles from \"./Profiles.module.scss\";\nimport Profile from \"../profile/Profile\";\nimport { useState } from \"react\";\nimport Modal from \"../modal/Modal\";\nimport useProfiles from \"../../hooks/useProfiles\";\nimport ToolBar from \"../ToolBar/ToolBar\";\nimport ToolBarItem from \"../ToolBarItem/ToolBarItem\";\nimport SyncIcon from \"@mui/icons-material/Sync\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profiles = () => {\n  _s();\n  const profiles = useProfiles();\n  const [modalType, setModalType] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedProfile, setSelectedProfile] = useState({});\n  const handleProfileClick = profile => {\n    setSelectedProfile(profile);\n    setContent({\n      name: profile === null || profile === void 0 ? void 0 : profile.name,\n      codec: profile === null || profile === void 0 ? void 0 : profile.codec,\n      codecs: profile === null || profile === void 0 ? void 0 : profile.codecs,\n      speed: profile === null || profile === void 0 ? void 0 : profile.speed\n    });\n    setModalType(\"profile\");\n    setIsModalOpen(true);\n  };\n  const onModalSave = async () => {\n    await fetch(`http://localhost:8000/profiles/${content.name}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        profile: content\n      })\n    });\n  };\n  const [content, setContent] = useState({\n    name: selectedProfile === null || selectedProfile === void 0 ? void 0 : selectedProfile.name,\n    codec: selectedProfile === null || selectedProfile === void 0 ? void 0 : selectedProfile.codec,\n    codecs: selectedProfile === null || selectedProfile === void 0 ? void 0 : selectedProfile.codecs,\n    speed: selectedProfile === null || selectedProfile === void 0 ? void 0 : selectedProfile.speeds\n  });\n  const leftToolBarItems = [/*#__PURE__*/_jsxDEV(ToolBarItem, {\n    text: \"Advanced\",\n    icon: /*#__PURE__*/_jsxDEV(SyncIcon, {\n      fontSize: \"large\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 38\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this)];\n  const profilesArray = [];\n  for (let i in profiles) {\n    profilesArray.push(profiles[i]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.profiles,\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {\n      leftToolBarItems: leftToolBarItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), isModalOpen && modalType === \"profile\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalBackdrop,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modalContent,\n        children: /*#__PURE__*/_jsxDEV(Modal, {\n          header: \"Edit - \" + (selectedProfile === null || selectedProfile === void 0 ? void 0 : selectedProfile.name),\n          type: \"profile\",\n          isOpen: isModalOpen,\n          setIsOpen: setIsModalOpen,\n          onSave: onModalSave,\n          data: selectedProfile,\n          content: content,\n          setContent: setContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.codecProfiles,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.header,\n          children: \"Codec Profiles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.profileContainer,\n          children: profilesArray === null || profilesArray === void 0 ? void 0 : profilesArray.map(profile => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleProfileClick(profile),\n            children: /*#__PURE__*/_jsxDEV(Profile, {\n              name: profile === null || profile === void 0 ? void 0 : profile.name,\n              codecs: profile === null || profile === void 0 ? void 0 : profile.codecs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 8\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n};\n_s(Profiles, \"HQrmAR/GgLF//m1x8+g9NPYgkHU=\", false, function () {\n  return [useProfiles];\n});\n_c = Profiles;\nexport default Profiles;\nvar _c;\n$RefreshReg$(_c, \"Profiles\");","map":{"version":3,"names":["styles","Profile","useState","Modal","useProfiles","ToolBar","ToolBarItem","SyncIcon","jsxDEV","_jsxDEV","Profiles","_s","profiles","modalType","setModalType","isModalOpen","setIsModalOpen","selectedProfile","setSelectedProfile","handleProfileClick","profile","setContent","name","codec","codecs","speed","onModalSave","fetch","content","method","headers","body","JSON","stringify","speeds","leftToolBarItems","text","icon","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","profilesArray","i","push","className","children","modalBackdrop","modalContent","header","type","isOpen","setIsOpen","onSave","data","codecProfiles","profileContainer","map","onClick","_c","$RefreshReg$"],"sources":["/Users/alexkeith/encodarr/src/components/profiles/Profiles.tsx"],"sourcesContent":["import styles from \"./Profiles.module.scss\";\nimport Profile from \"../profile/Profile\";\nimport { useState } from \"react\";\nimport Modal from \"../modal/Modal\";\nimport useProfiles from \"../../hooks/useProfiles\";\nimport ToolBar from \"../ToolBar/ToolBar\";\nimport ToolBarItem from \"../ToolBarItem/ToolBarItem\";\nimport SyncIcon from \"@mui/icons-material/Sync\";\n\nconst Profiles = () => {\n\tconst profiles = useProfiles();\n\tconst [modalType, setModalType] = useState(\"\");\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [selectedProfile, setSelectedProfile] = useState<any>({});\n\tconst handleProfileClick = (profile: any) => {\n\t\tsetSelectedProfile(profile);\n\t\tsetContent({\n\t\t\tname: profile?.name,\n\t\t\tcodec: profile?.codec,\n\t\t\tcodecs: profile?.codecs,\n\t\t\tspeed: profile?.speed,\n\t\t});\n\t\tsetModalType(\"profile\");\n\t\tsetIsModalOpen(true);\n\t};\n\tconst onModalSave = async () => {\n\t\tawait fetch(`http://localhost:8000/profiles/${content.name}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ profile: content }),\n\t\t});\n\t};\n\n\tconst [content, setContent] = useState({\n\t\tname: selectedProfile?.name,\n\t\tcodec: selectedProfile?.codec,\n\t\tcodecs: selectedProfile?.codecs,\n\t\tspeed: selectedProfile?.speeds,\n\t});\n\tconst leftToolBarItems: any = [\n\t\t<ToolBarItem text=\"Advanced\" icon={<SyncIcon fontSize=\"large\" />} />,\n\t];\n\n\tconst profilesArray: [] = [];\n\n\tfor (let i in profiles) {\n\t\tprofilesArray.push(profiles[i]);\n\t}\n\n\treturn (\n\t\t<div className={styles.profiles}>\n\t\t\t<ToolBar leftToolBarItems={leftToolBarItems} />\n\t\t\t{isModalOpen && modalType === \"profile\" && (\n\t\t\t\t<div className={styles.modalBackdrop}>\n\t\t\t\t\t<div className={styles.modalContent}>\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\theader={\"Edit - \" + selectedProfile?.name}\n\t\t\t\t\t\t\ttype={\"profile\"}\n\t\t\t\t\t\t\tisOpen={isModalOpen}\n\t\t\t\t\t\t\tsetIsOpen={setIsModalOpen}\n\t\t\t\t\t\t\tonSave={onModalSave}\n\t\t\t\t\t\t\tdata={selectedProfile}\n\t\t\t\t\t\t\tcontent={content}\n\t\t\t\t\t\t\tsetContent={setContent}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className={styles.content}>\n\t\t\t\t<div className={styles.codecProfiles}>\n\t\t\t\t\t<div className={styles.header}>Codec Profiles</div>\n\t\t\t\t\t<div className={styles.profileContainer}>\n\t\t\t\t\t\t{profilesArray?.map((profile: any) => (\n\t\t\t\t\t\t\t<div onClick={() => handleProfileClick(profile)}>\n\t\t\t\t\t\t\t\t<Profile name={profile?.name} codecs={profile?.codecs} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nexport default Profiles;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}